This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-14T04:33:31.607Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
App.css
App.jsx
assets/react.svg
components/CharacterSelect.jsx
components/Game.jsx
components/MainMenu.jsx
firebase/firebase.config.js
game/characters.js
game/game.config.js
game/scenes/BootScene.js
game/scenes/GameScene.js
game/scenes/PreloadScene.js
index.css
main.jsx

================================================================
Repository Files
================================================================

================
File: App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: App.jsx
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { ThemeProvider, createTheme } from '@mui/material';
import CssBaseline from '@mui/material/CssBaseline';
import MainMenu from './components/MainMenu';
import CharacterSelect from './components/CharacterSelect';
import Game from './components/Game';

// Create a dark theme
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
  },
});

function App() {
  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <Router>
        <Routes>
          <Route path="/" element={<MainMenu />} />
          <Route path="/character-select" element={<CharacterSelect />} />
          <Route path="/game" element={<Game />} />
        </Routes>
      </Router>
    </ThemeProvider>
  );
}

export default App;

================
File: assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: components/CharacterSelect.jsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Box, 
  Container, 
  Typography, 
  Card, 
  CardContent, 
  CardMedia, 
  Button, 
  Grid 
} from '@mui/material';
import { characters } from '../game/characters';
import characterSprite from '../assets/sprites/placeholder-character.png';

const CharacterSelect = () => {
  const navigate = useNavigate();

  const handleCharacterSelect = (character) => {
    navigate('/game');
  };

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      <Typography variant="h3" component="h1" align="center" gutterBottom>
        Choose Your Ancestor
      </Typography>
      <Grid container spacing={3}>
        {Object.entries(characters).map(([id, character]) => (
          <Grid item xs={12} sm={6} key={id}>
            <Card>
              <CardMedia
                component="img"
                height="200"
                image={characterSprite}
                alt={character.name}
                sx={{ objectFit: 'contain', p: 2 }}
              />
              <CardContent>
                <Typography variant="h5" component="h2" gutterBottom>
                  {character.name}
                </Typography>
                <Typography color="text.secondary" gutterBottom>
                  Special Abilities: {character.abilities.join(', ')}
                </Typography>
                <Button 
                  variant="contained" 
                  fullWidth
                  onClick={() => handleCharacterSelect(character)}
                >
                  Select Character
                </Button>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Container>
  );
};

export default CharacterSelect;

================
File: components/Game.jsx
================
import React, { useEffect } from 'react';
import Phaser from 'phaser';
import { gameConfig } from '../game/game.config';
import { BootScene } from '../game/scenes/BootScene';
import { PreloadScene } from '../game/scenes/PreloadScene';
import { GameScene } from '../game/scenes/GameScene';

const Game = () => {
  useEffect(() => {
    const config = {
      ...gameConfig,
      scene: [BootScene, PreloadScene, GameScene]
    };

    const game = new Phaser.Game(config);

    return () => {
      game.destroy(true);
    };
  }, []);

  return <div id="game-container"></div>;
};

export default Game;

================
File: components/MainMenu.jsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, Button, Typography, Container } from '@mui/material';

const MainMenu = () => {
  const navigate = useNavigate();
  
  return (
    <Container maxWidth="sm">
      <Box 
        sx={{ 
          minHeight: '100vh',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          gap: 3
        }}
      >
        <Typography variant="h2" component="h1" gutterBottom>
          Saligao Adventures
        </Typography>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, width: '100%' }}>
          <Button 
            variant="contained" 
            size="large"
            onClick={() => navigate('/character-select')}
          >
            Start Game
          </Button>
          <Button 
            variant="outlined" 
            size="large"
            onClick={() => navigate('/leaderboard')}
          >
            Leaderboard
          </Button>
        </Box>
      </Box>
    </Container>
  );
};

export default MainMenu;

================
File: firebase/firebase.config.js
================
import { initializeApp } from "firebase/app";
import { getFirestore } from '@firebase/firestore';
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyCw5QHUZ4bPmzg4UbvjOzhyEqTrmU-IT4Y",
  authDomain: "saligao-ancestors.firebaseapp.com",
  projectId: "saligao-ancestors",
  storageBucket: "saligao-ancestors.firebasestorage.app",
  messagingSenderId: "1081679729656",
  appId: "1:1081679729656:web:2c349f4d703d7aecb67c0d",
  measurementId: "G-VCCKV97XJ0"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
const analytics = getAnalytics(app);

================
File: game/characters.js
================
import ljCoolJSprite from '../assets/sprites/placeholder-character.png';

export const characters = {
    ancestor1: {
      name: 'LJ Cool J',
      sprite: 'ljcoolj',
      abilities: ['doubleJump'],
      stats: {
        speed: 200,
        jumpForce: -400
      }
    }
    // Add more characters as needed
  };

================
File: game/game.config.js
================
// game.config.js
import Phaser from 'phaser';

export const gameConfig = {
  type: Phaser.AUTO,
  parent: 'game-container',
  width: window.innerWidth,
  height: window.innerHeight,
  physics: {
    default: 'arcade',
    arcade: {
      gravity: { y: 600 }, // Increased gravity for faster falling
      debug: false
    }
  },
  scale: {
    mode: Phaser.Scale.RESIZE,
    autoCenter: Phaser.Scale.CENTER_BOTH
  }
};

// Add window resize handler
window.addEventListener('resize', () => {
  if (window.game) {
    window.game.scale.resize(window.innerWidth, window.innerHeight);
  }
});

================
File: game/scenes/BootScene.js
================
export class BootScene extends Phaser.Scene {
  constructor() {
    super({ key: 'BootScene' });
  }

  preload() {
    // We don't actually need to load a logo for the boot scene
    // Just proceed to the preload scene
  }

  create() {
    this.scene.start('PreloadScene');
  }
}

================
File: game/scenes/GameScene.js
================
export class GameScene extends Phaser.Scene {
  constructor() {
    super({ key: 'GameScene' });
    // Core game properties
    this.player = null;
    this.ground = null;
    this.platforms = null;
    this.enemies = null;
    this.coins = null;
    this.goal = null;
    this.levelWidth = 3200;
    
    // Physics constants
    this.MOVEMENT_SPEED = 200;
    this.MAX_SPEED = 400;
    this.ACCELERATION = 1500;
    this.DRAG = 1800;
    this.JUMP_VELOCITY = -600;
    this.JUMP_HOLD_DURATION = 150;
    this.MIN_JUMP_VELOCITY = -300;
    
    // Game state
    this.gameOver = false;
    this.score = 0;
    this.jumpTimer = 0;
    this.isJumping = false;
    this.playerFacingRight = true;
    this.backgroundTrees = [];
  }

  init() {
    this.gameOver = false;
    this.score = 0;
    this.jumpTimer = 0;
    this.isJumping = false;
    if (this.backgroundTrees) {
      this.backgroundTrees.forEach(tree => tree.destroy());
      this.backgroundTrees = [];
    }
  }

  createGradientBackground() {
    const width = this.levelWidth;
    const height = window.innerHeight;
    const skyHeight = height * 0.7;
    const groundHeight = height * 0.3;

    const graphics = this.add.graphics();
    
    graphics.fillGradientStyle(0x87CEEB, 0x87CEEB, 0x4682B4, 0x4682B4, 1);
    graphics.fillRect(0, 0, width, skyHeight);
    
    graphics.fillGradientStyle(0x90EE90, 0x90EE90, 0x228B22, 0x228B22, 1);
    graphics.fillRect(0, skyHeight, width, groundHeight);
    
    graphics.setScrollFactor(0.1);
    graphics.setDepth(0);
  }

  create() {
    this.gameOver = false;
    this.score = 0;
    
    this.physics.world.setBounds(0, 0, this.levelWidth, window.innerHeight);
    
    this.createGradientBackground();

    // Create trees
    for (let i = 0; i < 20; i++) {
      const tree = this.add.image(
        i * 400,
        window.innerHeight - 300,
        'tree'
      );
      const scale = Phaser.Math.FloatBetween(0.8, 1.2);
      tree.setScale(scale);
      tree.setScrollFactor(0.5);
      tree.setDepth(1);
      this.backgroundTrees.push(tree);
    }

    // Create platform
    const platformY = window.innerHeight - 40;
    this.ground = this.physics.add.staticImage(this.levelWidth / 2, platformY, 'platform');
    this.ground.setDisplaySize(this.levelWidth, 40);
    this.ground.setImmovable(true);
    this.ground.refreshBody();
    this.ground.setDepth(2);
    
    // Setup all game elements
    this.setupPlayer();
    this.setupGoal();
    this.setupEnemies();
    this.setupCollectibles();
    this.setupCollisions();
    this.setupUI();
    
    // Set up camera with deadzone
    this.cameras.main.startFollow(this.player, true);
    this.cameras.main.setDeadzone(100, 100);
    this.cameras.main.setBounds(0, 0, this.levelWidth, window.innerHeight);
    
    this.cursors = this.input.keyboard.createCursorKeys();
  }

  setupPlayer() {
    const platformY = window.innerHeight - 40;
    const playerStartY = platformY - 50; // Position player above the platform
    
    this.player = this.physics.add.sprite(100, playerStartY, 'player');
    this.player.setScale(0.2);
    this.player.setBounce(0.1);
    this.player.setCollideWorldBounds(true);
    this.player.setGravityY(1000);
    this.player.setDepth(3);
    this.player.setDrag(this.DRAG, 0);
    this.player.setMaxVelocity(this.MAX_SPEED, 1000);
    
    // Start facing right by flipping the sprite
    this.player.setFlipX(true);
    
    // Adjusted hitbox size and offset
    this.player.body.setSize(
      this.player.width * 0.5,  // Wider hitbox
      this.player.height * 0.9  // Taller hitbox
    );
    this.player.body.setOffset(
      this.player.width * 0.25,  // Centered horizontally
      this.player.height * 0.1   // Moved up slightly
    );
  }

  setupGoal() {
    const platformY = window.innerHeight - 40;
    const goalY = platformY - 60; // Position goal above the platform
    this.goal = this.physics.add.sprite(this.levelWidth - 100, goalY, 'goal');
    this.goal.setScale(0.3);
    this.goal.setImmovable(true);
    this.goal.body.setAllowGravity(false);
    this.goal.setDepth(3);
  }

  setupUI() {
    this.scoreText = this.add.text(16, 16, 'Score: 0', {
      fontSize: '18px',
      fill: '#fff',
      backgroundColor: '#000',
      padding: { x: 10, y: 5 }
    })
    .setScrollFactor(0)
    .setDepth(5);

    this.gameOverText = this.add.text(window.innerWidth / 2, window.innerHeight / 2, 'Game Over!\nPress SPACE to restart', {
      fontSize: '32px',
      fill: '#fff',
      backgroundColor: '#000',
      padding: { x: 20, y: 10 },
      align: 'center'
    })
    .setOrigin(0.5)
    .setScrollFactor(0)
    .setVisible(false)
    .setDepth(5);

    this.input.keyboard.on('keydown-SPACE', () => {
      if (this.gameOver) {
        this.scene.restart();
      }
    });
  }

  setupEnemies() {
    this.enemies = this.physics.add.group();
    
    // Create patrolling enemies
    const enemyPositions = [
      { x: 600, y: window.innerHeight - 80 },
      { x: 1200, y: window.innerHeight - 80 },
      { x: 1800, y: window.innerHeight - 80 }
    ];
    
    enemyPositions.forEach(pos => {
      const enemy = this.enemies.create(pos.x, pos.y, 'obstacleFrog');
      enemy.setScale(0.15);
      enemy.setCollideWorldBounds(true);
      enemy.setVelocityX(100);
      enemy.patrolPoint = pos.x;
      enemy.patrolDistance = 200;
      enemy.setDepth(3);
    });
  }

  setupCollectibles() {
    this.coins = this.physics.add.group();
    
    // Create coins in interesting patterns
    for (let i = 0; i < 20; i++) {
      const x = 300 + i * 150;
      const y = window.innerHeight - 150 - Math.sin(i * 0.5) * 100;
      const coin = this.coins.create(x, y, 'coin');
      coin.setScale(0.5);
      coin.setBounceY(0.2);
      coin.setDepth(2);
      
      // Add floating animation
      this.tweens.add({
        targets: coin,
        y: y - 10,
        duration: 1500,
        yoyo: true,
        repeat: -1,
        ease: 'Sine.easeInOut'
      });
    }
  }

  setupCollisions() {
    this.physics.add.collider(this.player, this.ground);
    this.physics.add.collider(this.enemies, this.ground);
    
    // Setup goal collision
    this.physics.add.overlap(this.player, this.goal, this.reachGoal, null, this);
    
    // New collision handlers for enemies and collectibles
    this.physics.add.overlap(this.player, this.enemies, this.hitEnemy, null, this);
    this.physics.add.overlap(this.player, this.coins, this.collectCoin, null, this);
  }

  reachGoal(player, goal) {
    if (!this.gameOver) {
      this.gameOver = true;
      this.scoreText.setText('Level Complete!\nScore: ' + this.score);
      player.setTint(0x00ff00);
      this.gameOverText
        .setText('Level Complete!\nPress SPACE to play again')
        .setVisible(true);
      player.setVelocityX(0);
    }
  }

  hitEnemy(player, enemy) {
    const playerBottom = player.body.bottom;
    const enemyTop = enemy.body.top;
    
    if (playerBottom < enemyTop + 10) {
      // Player is above enemy - bounce off and destroy enemy
      player.setVelocityY(this.JUMP_VELOCITY * 0.7);
      enemy.destroy();
      this.score += 100;
      this.scoreText.setText('Score: ' + this.score);
    } else {
      // Player hits enemy from side or below
      this.handlePlayerDeath();
    }
  }

  collectCoin(player, coin) {
    const coinX = coin.x;
    const coinY = coin.y;
    coin.destroy();
    this.score += 10;
    this.scoreText.setText('Score: ' + this.score);
    
    // Add collection effect using new particle system
    const particles = this.add.particles(coinX, coinY, 'coin', {
      speed: { min: -200, max: 200 },
      angle: { min: 0, max: 360 },
      scale: { start: 0.4, end: 0 },
      lifespan: 500,
      quantity: 1,
      frequency: 100,
      maxParticles: 5
    });
    
    this.time.delayedCall(500, () => {
      particles.destroy();
    });
  }

  handlePlayerDeath() {
    if (!this.gameOver) {
      this.gameOver = true;
      this.player.setTint(0xff0000);
      this.player.setVelocityX(0);
      this.player.setAccelerationX(0);
      
      this.tweens.add({
        targets: this.player,
        alpha: 0.5,
        yoyo: true,
        repeat: 2,
        duration: 200,
        onComplete: () => {
          this.gameOverText.setVisible(true);
        }
      });
    }
  }

  update(time, delta) {
    if (this.gameOver) return;

    this.handlePlayerMovement(time);
    this.updateEnemies();
    
    // Update background trees
    this.backgroundTrees.forEach((tree, index) => {
      const treeX = (index * 400) - (this.cameras.main.scrollX * 0.5) % 8000;
      tree.x = treeX < this.cameras.main.scrollX - 400 ? treeX + 8000 : treeX;
    });
  }

  handlePlayerMovement(time) {
    const onGround = this.player.body.touching.down;
    
    // Horizontal movement with acceleration
    if (this.cursors.left.isDown) {
      this.player.setAccelerationX(-this.ACCELERATION);
      if (this.playerFacingRight) {
        this.player.setFlipX(false);
        this.playerFacingRight = false;
      }
    } else if (this.cursors.right.isDown) {
      this.player.setAccelerationX(this.ACCELERATION);
      if (!this.playerFacingRight) {
        this.player.setFlipX(true);
        this.playerFacingRight = true;
      }
    } else {
      this.player.setAccelerationX(0);
    }

    // Variable height jumping
    if (this.cursors.up.isDown && onGround && !this.isJumping) {
      this.player.setVelocityY(this.JUMP_VELOCITY);
      this.isJumping = true;
      this.jumpTimer = time;
    } else if (this.cursors.up.isDown && this.isJumping) {
      if (time - this.jumpTimer < this.JUMP_HOLD_DURATION) {
        this.player.setVelocityY(this.JUMP_VELOCITY);
      }
    } else if (this.cursors.up.isUp) {
      this.isJumping = false;
      if (this.player.body.velocity.y < this.MIN_JUMP_VELOCITY) {
        this.player.setVelocityY(this.MIN_JUMP_VELOCITY);
      }
    }

    if (onGround) {
      this.isJumping = false;
    }
  }

  updateEnemies() {
    this.enemies.children.iterate(enemy => {
      if (enemy.x < enemy.patrolPoint - enemy.patrolDistance) {
        enemy.setVelocityX(100);
        enemy.setFlipX(false);
      } else if (enemy.x > enemy.patrolPoint + enemy.patrolDistance) {
        enemy.setVelocityX(-100);
        enemy.setFlipX(true);
      }
    });
  }
}

================
File: game/scenes/PreloadScene.js
================
import Phaser from 'phaser';

import characterSprite from '../../assets/sprites/placeholder-character.png';
import platformSprite from '../../assets/sprites/platform.png';
import goalSprite from '../../assets/sprites/goal.png';
import frogSprite from '../../assets/sprites/obstacle-frog.png';
import treeSprite from '../../assets/backgrounds/tree.png';
import coinSprite from '../../assets/sprites/coin.png';

export class PreloadScene extends Phaser.Scene {
  constructor() {
    super({ key: 'PreloadScene' });
  }

  preload() {
    // Debug logging
    console.log('PreloadScene: Starting asset load');
    
    // Create loading bar
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;
    
    const progressBar = this.add.graphics();
    const progressBox = this.add.graphics();
    progressBox.fillStyle(0x222222, 0.8);
    progressBox.fillRect(width / 4, height / 2 - 30, width / 2, 50);

    // Add loading text
    const loadingText = this.add.text(width / 2, height / 2 - 50, 'Loading...', {
      font: '20px monospace',
      fill: '#ffffff'
    });
    loadingText.setOrigin(0.5, 0.5);

    // Load game assets with explicit dimensions
    this.load.image('player', characterSprite);
    this.load.image('platform', platformSprite);
    this.load.image('goal', goalSprite);
    this.load.image('obstacleFrog', frogSprite);
    this.load.image('tree', treeSprite);
    this.load.image('coin', coinSprite);

    // Update the progress bar
    this.load.on('progress', (value) => {
      progressBar.clear();
      progressBar.fillStyle(0xffffff, 1);
      progressBar.fillRect(width / 4 + 10, height / 2 - 20, (width / 2 - 20) * value, 30);
    });

    this.load.on('complete', () => {
      console.log('PreloadScene: All assets loaded');
      progressBar.destroy();
      progressBox.destroy();
      loadingText.destroy();
    });
  }

  create() {
    console.log('PreloadScene: Starting GameScene');
    this.scene.start('GameScene');
  }
}

================
File: index.css
================
#game-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #1a1a1a;
}

canvas {
  border: 2px solid #333;
  border-radius: 8px;
  max-width: 100%;
  max-height: 100vh;
}

================
File: main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
