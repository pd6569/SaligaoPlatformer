This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-13T10:09:32.866Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.firebase/hosting.ZGlzdA.cache
.firebaserc
.gitignore
apphosting.yaml
documentation/handover-doc-2.md
documentation/handover-doc-3.txt
documentation/handover-doc.md
eslint.config.js
firebase.json
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/components/CharacterSelect.jsx
src/components/Game.jsx
src/components/MainMenu.jsx
src/firebase/firebase.config.js
src/game/characters.js
src/game/game.config.js
src/game/scenes/BootScene.js
src/game/scenes/GameScene.js
src/game/scenes/PreloadScene.js
src/index.css
src/main.jsx
src/repomix-output.txt
vite.config.js

================================================================
Repository Files
================================================================

================
File: .firebase/hosting.ZGlzdA.cache
================
vite.svg,1739337794010,699a02e0e68a579f687d364bbbe7633161244f35af068220aee37b1b33dfb3c7
index.html,1739440918924,e47b821c7628a7a7903610405e3251e7c588b3256952b382157c2d6126b33a0c
assets/platform-BNvNy6j5.png,1739440918924,34c70f72722a84e0df08b2363b4869dda04d89dbe3e59697eae896cc10f683a8
assets/index-CLPL6D8D.css,1739440918928,cc3cb5deabb4094813ba7c6303a824bf6f11aa2474e38a2de28809a698bb5aa5
assets/tree-DTdZXFSO.png,1739440918922,f2168258adddea9adfd10fec6a6e17c4440d1cf127fc99eef4aa67cf5f663df3
assets/placeholder-character-Cbiu5zXt.png,1739440918922,fbd8b66b2739d09332280c509a4dadf0b38292c1858b023dc5e01ef4a11c828b
assets/obstacle-frog-BvtGS31_.png,1739440918928,6664ebddab7124135308f425d63b061b215aaf70556725bc8d945fe2bc11ad30
assets/goal-CUYrROul.png,1739440918928,ebc20912c1a51c5c07f2811d0da78365400b0f23f721cc7a3964e0f660c95c28
assets/index-CNloh8XR.js,1739440918929,0766637d3c183ecfd0017b00e3bb8287b86b1dba0b9bc4ba3f41f723205fb4ae

================
File: .firebaserc
================
{
  "projects": {
    "default": "saligao-ancestors"
  }
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: apphosting.yaml
================
# Settings for Backend (on Cloud Run).
# See https://firebase.google.com/docs/app-hosting/configure#cloud-run
runConfig:
  minInstances: 0
  # maxInstances: 100
  # concurrency: 80
  # cpu: 1
  # memoryMiB: 512

# Environment variables and secrets.
# env:
  # Configure environment variables.
  # See https://firebase.google.com/docs/app-hosting/configure#user-defined-environment
  # - variable: MESSAGE
  #   value: Hello world!
  #   availability:
  #     - BUILD
  #     - RUNTIME

  # Grant access to secrets in Cloud Secret Manager.
  # See https://firebase.google.com/docs/app-hosting/configure#secret-parameters
  # - variable: MY_SECRET
  #   secret: mySecretRef

================
File: documentation/handover-doc-2.md
================
# Saligao Adventures Game - Development Handover Document

## Current Implementation Status

### Core Game Structure
- Built with Phaser 3, React, and Material UI
- Auto-running platformer style game
- Single continuous level with infinite scrolling background
- Jump mechanics for obstacle avoidance

### Current Features
1. **Player Mechanics**
   - Auto-running with constant speed (300)
   - Jump ability (-800 velocity)
   - Collision detection with platform and obstacles
   - Player sprite flipped horizontally

2. **Background System**
   - Gradient background (sky to ground)
   - Scrolling tree sprites with parallax effect
   - Trees positioned and scaled randomly

3. **Obstacle System**
   - Bouncing frog obstacles
   - Warning system before frog appearance
   - Random spawn positions and heights

4. **UI Elements**
   - Distance score counter
   - Game over screen
   - Restart functionality

## Critical Issues to Fix

1. **Background Persistence**
   - Issue: Trees don't reload properly on game restart
   - Solution: Move tree creation to a separate method and ensure proper cleanup/recreation during restart
   - Consider using scene transitions instead of direct restart

2. **Game Mechanics Balance**
   - Issue: Current frog patterns make game too difficult
   - Suggested improvements:
     * Reduce frog bounce height
     * Increase warning time
     * Add patterns/rhythm to spawning
     * Create clear "safe zones" between obstacles
     * Consider adding power-ups or special abilities

## Next Development Phase Recommendations

1. **Gameplay Improvements**
   - Add difficulty progression
   - Implement proper level design with planned obstacle patterns
   - Add collectibles for bonus points
   - Consider adding double-jump or slide mechanics
   - Implement checkpoints

2. **Visual Enhancements**
   - Add cloud layer to background
   - Implement proper sprite animations
   - Add particle effects for jumps/collisions
   - Improve warning indicators
   - Add visual feedback for successful jumps

3. **Sound & Music**
   - Background music
   - Jump sound effects
   - Collision sounds
   - Warning sound for obstacles

4. **UI/UX Improvements**
   - Add pause functionality
   - Implement proper game over screen
   - Add high score system
   - Tutorial overlay for first play

## Asset Requirements

1. **Graphics**
   - Background elements (clouds, mountains)
   - Player animation sprites
   - Improved obstacle designs
   - UI elements and icons
   - All sprites should be PNG format
   - Recommended sizes:
     * Background elements: 1920x1080
     * Character sprites: 256x256
     * Obstacles: 128x128

2. **Audio**
   - Background music track
   - Sound effects (jump, collision, warning)
   - Victory/defeat jingles

## Code Structure Recommendations

1. **Scene Organization**
   - Separate methods for different game systems
   - Clear state management
   - Better event handling
   - Improved physics configuration

2. **Configuration**
   - Move magic numbers to config file
   - Create difficulty settings
   - Separate asset loading
   - Define level patterns

## Suggested Next Steps

1. Immediate Fixes:
   ```javascript
   // Fix tree reloading
   destroy() {
     this.backgroundTrees.forEach(tree => tree.destroy());
     this.backgroundTrees = [];
   }
   
   // Improve obstacle patterns
   spawnObstacle() {
     // Add pattern-based spawning
     // Include safe zones
     // Longer warning time
   }
   ```

2. Medium-term:
   - Implement proper level design system
   - Add progression mechanics
   - Improve visual feedback
   - Add sound system

3. Long-term:
   - Add multiple characters
   - Implement power-up system
   - Add social features
   - Create level editor

## Testing Requirements
- Physics collision testing
- Performance testing for background scrolling
- Mobile device compatibility
- Different screen size testing

## Known Working Elements
- Basic physics implementation
- Background scrolling system
- Score tracking
- Basic obstacle system

## Current Configuration Values
- Player run speed: 300
- Jump velocity: -800
- Gravity: 2000
- Level width: 3200
- Ground position: window.innerHeight - 40
- Tree spacing: 400px
- Obstacle spawn delay: 2000ms

================
File: documentation/handover-doc-3.txt
================
# Saligao Adventures Game - Development Status & Next Steps

## Current Implementation Status

### Core Game Architecture
- Built with Phaser 3, React, and Material UI
- Traditional platformer mechanics (like Super Mario)
- Firebase integration for deployment
- Scene-based structure with Boot, Preload, and Game scenes

### Current Features
1. **Player Mechanics**
   - Left/right movement with arrow keys (MOVEMENT_SPEED: 200)
   - Jump mechanics (JUMP_VELOCITY: -400)
   - Gravity-based physics (gravity: 1000)
   - Character flipping based on movement direction
   - Collision detection with platforms and obstacles

2. **Level Design**
   - Static ground platform
   - Multiple elevated platforms
   - Background parallax with scrolling trees
   - Gradient background (sky to ground)
   - Level width: 3200 pixels

3. **Game Elements**
   - Score tracking based on distance
   - Goal/finish point
   - Basic obstacle system
   - Character selection screen

4. **Technical Implementation**
   - Proper depth layering (0-5)
   - Scene management
   - Camera system with deadzone
   - Asset preloading
   - Proper build configuration for assets

## Priority Development Areas

1. **Core Gameplay Enhancement**
   - Add proper character animations (idle, run, jump)
   - Implement variable jump heights based on button hold
   - Add acceleration/deceleration to movement
   - Consider adding wall jump or double jump mechanics
   - Add crouching and sliding mechanics

2. **Level Design System**
   - Create proper level design tools/format
   - Add different types of platforms:
     * Moving platforms
     * Disappearing platforms
     * Bouncy platforms
   - Add environmental hazards
   - Design proper level progression

3. **Enemy System**
   - Basic enemy types with different behaviors:
     * Patrolling enemies
     * Flying enemies
     * Jumping enemies
   - Enemy interaction mechanics
   - Enemy spawning system

4. **Collectibles System**
   - Add coins/gems for scoring
   - Implement power-ups:
     * Speed boost
     * Jump boost
     * Temporary invincibility
   - Add collection effects and sounds

## Technical Debt & Issues to Address
1. Fix any remaining asset bundling issues
2. Implement proper state management for game progression
3. Add proper sound system
4. Optimize performance for mobile devices

## Character System Expansion
1. Add more character options with unique abilities
2. Implement character unlocking system
3. Add character-specific animations and effects
4. Consider adding character progression/upgrades

## Next Immediate Steps
1. Implement proper character animations
2. Add basic enemy types
3. Design first complete level
4. Add coin collection system
5. Implement proper game audio

## Code Structure Notes
- GameScene handles core gameplay
- Character data in characters.js
- Asset preloading in PreloadScene
- Main game config in game.config.js

## Build & Deployment
- Using Vite for bundling
- Firebase hosting
- Assets must be properly imported in components
- Build command: npm run build
- Deploy command: firebase deploy

## Known Issues
1. Asset bundling in production needs proper configuration
2. Tree backgrounds need proper cleanup on scene restart
3. Platform collisions might need fine-tuning

## Suggested Development Order
1. First implement proper player movement physics with acceleration
2. Add basic enemy type (patrolling ground enemy)
3. Add coin collection system
4. Implement level design tools
5. Create first complete level with all elements

================
File: documentation/handover-doc.md
================
# Saligao Adventures Game - Development Handover Document

## Project Overview
A 2D platformer game built with React, Phaser 3, and Material UI featuring:
- Character selection system
- Platform-based gameplay
- Obstacle avoidance
- Goal-based level completion

## Current Stack
- React (Frontend framework)
- Phaser 3 (Game engine)
- Material UI (UI components)
- React Router (Navigation)

## Current Issues to Fix
1. **Physics Issues**
   - Player falls through platforms
   - Goal object doesn't maintain position
   - Obstacles not displaying

2. **Asset Loading**
   - Asset paths need verification
   - SVG compatibility needs checking
   - Static object positioning needs adjustment

## Core Components

### 1. Main Menu
- Clean Material UI interface
- Navigation to character select and game
- Leaderboard option (not implemented)

### 2. Character Selection
- Grid layout of character cards
- Character preview images
- Special abilities display (not implemented)

### 3. Game Scene
- Phaser game instance
- Platform-based level design
- Character movement system
- Goal and obstacle system

## Game Mechanics

### Current Implementation
- Left/Right movement
- Jump mechanics
- Platform collision
- Goal detection (needs fixing)
- Obstacle collision (needs fixing)

### Physics Configuration
```javascript
physics: {
    default: 'arcade',
    arcade: {
        gravity: { y: 300 },
        debug: true
    }
}
```

## Asset Structure
```
public/src/assets/
├── sprites/
    ├── placeholder-character.png
    ├── platform.png
    ├── goal.svg
    └── obstacle.svg
```

## Next Development Steps
1. Fix current issues:
   - Adjust platform collision detection
   - Fix goal object physics
   - Debug obstacle display and collision
2. Implement basic features:
   - Level design system
   - Character animations
   - Sound effects
3. Add gameplay elements:
   - Score system
   - Multiple levels
   - Character abilities

## Known Working Elements
- Material UI menu system
- Basic character movement
- Platform creation
- Game scene initialization

## Suggested Next Steps
1. Implement proper static body physics for platforms
2. Convert SVG assets to PNG for better Phaser compatibility
3. Add proper spawn points for player and objects
4. Implement proper collision groups
5. Add basic animations for character movement

## Current Game Configuration
- Canvas size: 800x600
- Physics engine: Arcade
- Debug mode: Enabled
- Gravity: 300

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: firebase.json
================
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "saligao-platformer",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@firebase/app": "^0.11.1",
    "@firebase/firestore": "^4.7.8",
    "@mui/material": "^6.4.4",
    "phaser": "^3.88.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.1.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.19.0",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.19.0",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.18",
    "globals": "^15.14.0",
    "vite": "^6.1.0"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.jsx
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { ThemeProvider, createTheme } from '@mui/material';
import CssBaseline from '@mui/material/CssBaseline';
import MainMenu from './components/MainMenu';
import CharacterSelect from './components/CharacterSelect';
import Game from './components/Game';

// Create a dark theme
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
  },
});

function App() {
  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <Router>
        <Routes>
          <Route path="/" element={<MainMenu />} />
          <Route path="/character-select" element={<CharacterSelect />} />
          <Route path="/game" element={<Game />} />
        </Routes>
      </Router>
    </ThemeProvider>
  );
}

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/CharacterSelect.jsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Box, 
  Container, 
  Typography, 
  Card, 
  CardContent, 
  CardMedia, 
  Button, 
  Grid 
} from '@mui/material';
import { characters } from '../game/characters';
import characterSprite from '../assets/sprites/placeholder-character.png';

const CharacterSelect = () => {
  const navigate = useNavigate();

  const handleCharacterSelect = (character) => {
    navigate('/game');
  };

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      <Typography variant="h3" component="h1" align="center" gutterBottom>
        Choose Your Ancestor
      </Typography>
      <Grid container spacing={3}>
        {Object.entries(characters).map(([id, character]) => (
          <Grid item xs={12} sm={6} key={id}>
            <Card>
              <CardMedia
                component="img"
                height="200"
                image={characterSprite}
                alt={character.name}
                sx={{ objectFit: 'contain', p: 2 }}
              />
              <CardContent>
                <Typography variant="h5" component="h2" gutterBottom>
                  {character.name}
                </Typography>
                <Typography color="text.secondary" gutterBottom>
                  Special Abilities: {character.abilities.join(', ')}
                </Typography>
                <Button 
                  variant="contained" 
                  fullWidth
                  onClick={() => handleCharacterSelect(character)}
                >
                  Select Character
                </Button>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Container>
  );
};

export default CharacterSelect;

================
File: src/components/Game.jsx
================
import React, { useEffect } from 'react';
import Phaser from 'phaser';
import { gameConfig } from '../game/game.config';
import { BootScene } from '../game/scenes/BootScene';
import { PreloadScene } from '../game/scenes/PreloadScene';
import { GameScene } from '../game/scenes/GameScene';

const Game = () => {
  useEffect(() => {
    const config = {
      ...gameConfig,
      scene: [BootScene, PreloadScene, GameScene]
    };

    const game = new Phaser.Game(config);

    return () => {
      game.destroy(true);
    };
  }, []);

  return <div id="game-container"></div>;
};

export default Game;

================
File: src/components/MainMenu.jsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, Button, Typography, Container } from '@mui/material';

const MainMenu = () => {
  const navigate = useNavigate();
  
  return (
    <Container maxWidth="sm">
      <Box 
        sx={{ 
          minHeight: '100vh',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          gap: 3
        }}
      >
        <Typography variant="h2" component="h1" gutterBottom>
          Saligao Adventures
        </Typography>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, width: '100%' }}>
          <Button 
            variant="contained" 
            size="large"
            onClick={() => navigate('/character-select')}
          >
            Start Game
          </Button>
          <Button 
            variant="outlined" 
            size="large"
            onClick={() => navigate('/leaderboard')}
          >
            Leaderboard
          </Button>
        </Box>
      </Box>
    </Container>
  );
};

export default MainMenu;

================
File: src/firebase/firebase.config.js
================
import { initializeApp } from "firebase/app";
import { getFirestore } from '@firebase/firestore';
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyCw5QHUZ4bPmzg4UbvjOzhyEqTrmU-IT4Y",
  authDomain: "saligao-ancestors.firebaseapp.com",
  projectId: "saligao-ancestors",
  storageBucket: "saligao-ancestors.firebasestorage.app",
  messagingSenderId: "1081679729656",
  appId: "1:1081679729656:web:2c349f4d703d7aecb67c0d",
  measurementId: "G-VCCKV97XJ0"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
const analytics = getAnalytics(app);

================
File: src/game/characters.js
================
import ljCoolJSprite from '../assets/sprites/placeholder-character.png';

export const characters = {
    ancestor1: {
      name: 'LJ Cool J',
      sprite: 'ljcoolj',
      abilities: ['doubleJump'],
      stats: {
        speed: 200,
        jumpForce: -400
      }
    }
    // Add more characters as needed
  };

================
File: src/game/game.config.js
================
// game.config.js
import Phaser from 'phaser';

export const gameConfig = {
  type: Phaser.AUTO,
  parent: 'game-container',
  width: window.innerWidth,
  height: window.innerHeight,
  physics: {
    default: 'arcade',
    arcade: {
      gravity: { y: 600 }, // Increased gravity for faster falling
      debug: false
    }
  },
  scale: {
    mode: Phaser.Scale.RESIZE,
    autoCenter: Phaser.Scale.CENTER_BOTH
  }
};

// Add window resize handler
window.addEventListener('resize', () => {
  if (window.game) {
    window.game.scale.resize(window.innerWidth, window.innerHeight);
  }
});

================
File: src/game/scenes/BootScene.js
================
export class BootScene extends Phaser.Scene {
  constructor() {
    super({ key: 'BootScene' });
  }

  preload() {
    // We don't actually need to load a logo for the boot scene
    // Just proceed to the preload scene
  }

  create() {
    this.scene.start('PreloadScene');
  }
}

================
File: src/game/scenes/GameScene.js
================
import Phaser from 'phaser';

import treeSprite from '../../assets/backgrounds/tree.png';

export class GameScene extends Phaser.Scene {
  constructor() {
    super({ key: 'GameScene' });
    this.player = null;
    this.ground = null;
    this.goal = null;
    this.platforms = null;
    this.obstacles = null;
    this.gameOver = false;
    this.score = 0;
    this.levelWidth = 3200;
    this.MOVEMENT_SPEED = 200;
    this.JUMP_VELOCITY = -700;
    this.backgroundTrees = [];
    this.playerFacingRight = false;
  }

  init() {
    this.gameOver = false;
    this.score = 0;
    if (this.backgroundTrees) {
      this.backgroundTrees.forEach(tree => tree.destroy());
      this.backgroundTrees = [];
    }
  }

  createGradientBackground() {
    const width = this.levelWidth;
    const height = window.innerHeight;
    const skyHeight = height * 0.7;
    const groundHeight = height * 0.3;

    const graphics = this.add.graphics();
    
    graphics.fillGradientStyle(0x87CEEB, 0x87CEEB, 0x4682B4, 0x4682B4, 1);
    graphics.fillRect(0, 0, width, skyHeight);
    
    graphics.fillGradientStyle(0x90EE90, 0x90EE90, 0x228B22, 0x228B22, 1);
    graphics.fillRect(0, skyHeight, width, groundHeight);
    
    graphics.setScrollFactor(0.1);
    graphics.setDepth(0);
  }

  preload() {
    this.load.image('tree', treeSprite);
  }

  create() {
    this.gameOver = false;
    this.score = 0;
    
    this.physics.world.setBounds(0, 0, this.levelWidth, window.innerHeight);
    
    this.createGradientBackground();

    // Create trees
    for (let i = 0; i < 20; i++) {
      const tree = this.add.image(
        i * 400,
        window.innerHeight - 300,
        'tree'
      );
      const scale = Phaser.Math.FloatBetween(0.8, 1.2);
      tree.setScale(scale);
      tree.setScrollFactor(0.5);
      tree.setDepth(1);
      this.backgroundTrees.push(tree);
    }

    // Create ground
    const groundY = window.innerHeight - 40;
    this.ground = this.physics.add.staticImage(this.levelWidth / 2, groundY, 'platform');
    this.ground.setDisplaySize(this.levelWidth, 20);
    this.ground.setImmovable(true);
    this.ground.refreshBody();
    this.ground.setDepth(2);
    this.ground.setTint(0xFFFFFF);
    
    // Create player
    const playerStartY = groundY - 60;
    this.player = this.physics.add.sprite(100, playerStartY, 'player');
    this.player.setScale(0.2);
    this.player.setBounce(0.1);
    this.player.setCollideWorldBounds(true);
    this.player.setGravityY(1000);
    this.player.setDepth(3);
    
    // Adjust player hitbox
    this.player.body.setSize(
      this.player.width * 0.3,
      this.player.height * 0.8
    );
    this.player.body.setOffset(
      this.player.width * 0.35,
      this.player.height * 0.2
    );
    
    this.setupGameObjects();
    this.setupPlatforms();
    this.setupUI();
    
    // Set up camera with deadzone
    this.cameras.main.startFollow(this.player, true);
    this.cameras.main.setDeadzone(100, 100);
    this.cameras.main.setBounds(0, 0, this.levelWidth, window.innerHeight);
    
    // Input
    this.cursors = this.input.keyboard.createCursorKeys();
  }

  setupGameObjects() {
    const playerStartY = window.innerHeight - 100;
    
    // Create goal
    this.goal = this.physics.add.sprite(this.levelWidth - 100, playerStartY, 'goal');
    this.goal.setScale(0.3);
    this.goal.setImmovable(true);
    this.goal.body.setAllowGravity(false);
    this.goal.setDepth(3);
    
    // Create obstacles group
    this.obstacles = this.physics.add.group({
      allowGravity: false,
      immovable: true
    });
    
    // Set up collisions
    this.physics.add.collider(this.player, this.ground);
    this.physics.add.overlap(this.player, this.goal, this.reachGoal, null, this);
    this.physics.add.overlap(this.player, this.obstacles, this.hitObstacle, null, this);
  }

  setupPlatforms() {
    this.platforms = this.physics.add.staticGroup();
    
    const platformPositions = [
      { x: 400, y: window.innerHeight - 150 },
      { x: 800, y: window.innerHeight - 250 },
      { x: 1200, y: window.innerHeight - 180 },
      { x: 1600, y: window.innerHeight - 300 },
      { x: 2000, y: window.innerHeight - 200 }
    ];

    platformPositions.forEach(pos => {
      const platform = this.platforms.create(pos.x, pos.y, 'platform');
      platform.setScale(0.5, 0.3).refreshBody();
      platform.setDepth(2);
      platform.setTint(0xFFFFFF);
      platform.clearTint();
      platform.setTint(0xFFFFFF);
    });

    this.physics.add.collider(this.player, this.platforms);
  }

  setupUI() {
    this.scoreText = this.add.text(16, 16, 'Distance: 0m', {
      fontSize: '18px',
      fill: '#fff',
      backgroundColor: '#000',
      padding: { x: 10, y: 5 }
    })
    .setScrollFactor(0)
    .setDepth(5);

    this.gameOverText = this.add.text(window.innerWidth / 2, window.innerHeight / 2, 'Game Over!\nPress SPACE to restart', {
      fontSize: '32px',
      fill: '#fff',
      backgroundColor: '#000',
      padding: { x: 20, y: 10 },
      align: 'center'
    })
    .setOrigin(0.5)
    .setScrollFactor(0)
    .setVisible(false)
    .setDepth(5);

    this.input.keyboard.on('keydown-SPACE', () => {
      if (this.gameOver) {
        this.scene.restart();
      }
    });
  }

  reachGoal(player, goal) {
    if (!this.gameOver) {
      this.gameOver = true;
      this.scoreText.setText('Level Complete!\nDistance: ' + Math.floor(this.score) + 'm');
      player.setTint(0x00ff00);
      this.gameOverText
        .setText('Level Complete!\nPress SPACE to play again')
        .setVisible(true);
      player.setVelocityX(0);
    }
  }

  hitObstacle(player, obstacle) {
    if (!this.gameOver) {
      this.gameOver = true;
      player.setTint(0xff0000);
      player.setVelocityX(0);
      
      this.tweens.add({
        targets: player,
        alpha: 0.5,
        yoyo: true,
        repeat: 2,
        duration: 200
      });
      
      this.gameOverText.setVisible(true);
    }
  }

  update() {
    if (this.gameOver) return;

    // Handle horizontal movement
    if (this.cursors.left.isDown) {
      this.player.setVelocityX(-this.MOVEMENT_SPEED);
      if (this.playerFacingRight) {
        this.player.setFlipX(false);
        this.playerFacingRight = false;
      }
    } else if (this.cursors.right.isDown) {
      this.player.setVelocityX(this.MOVEMENT_SPEED);
      if (!this.playerFacingRight) {
        this.player.setFlipX(true);
        this.playerFacingRight = true;
      }
    } else {
      // Decelerate when no movement keys are pressed
      this.player.setVelocityX(0);
    }

    // Handle jumping
    const canJump = this.player.body.touching.down || this.player.body.blocked.down;
    if (this.cursors.up.isDown && canJump) {
      this.player.setVelocityY(this.JUMP_VELOCITY);
      
      // Jump squash and stretch animation
      this.tweens.add({
        targets: this.player,
        scaleX: 0.22,
        scaleY: 0.18,
        duration: 100,
        yoyo: true
      });
    }

    // Update score based on maximum distance reached
    const currentDistance = Math.floor(this.player.x / 50);
    if (currentDistance > this.score) {
      this.score = currentDistance;
      this.scoreText.setText('Distance: ' + this.score + 'm');
    }

    // Update background trees
    this.backgroundTrees.forEach((tree, index) => {
      const treeX = (index * 400) - (this.cameras.main.scrollX * 0.5) % 8000;
      tree.x = treeX < this.cameras.main.scrollX - 400 ? treeX + 8000 : treeX;
    });
  }
}

================
File: src/game/scenes/PreloadScene.js
================
import Phaser from 'phaser';

import characterSprite from '../../assets/sprites/placeholder-character.png';
import platformSprite from '../../assets/sprites/platform.png';
import goalSprite from '../../assets/sprites/goal.png';
import frogSprite from '../../assets/sprites/obstacle-frog.png';

export class PreloadScene extends Phaser.Scene {
  constructor() {
    super({ key: 'PreloadScene' });
  }

  preload() {
    // Debug logging
    console.log('PreloadScene: Starting asset load');
    
    // Create loading bar
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;
    
    const progressBar = this.add.graphics();
    const progressBox = this.add.graphics();
    progressBox.fillStyle(0x222222, 0.8);
    progressBox.fillRect(width / 4, height / 2 - 30, width / 2, 50);

    // Add loading text
    const loadingText = this.add.text(width / 2, height / 2 - 50, 'Loading...', {
      font: '20px monospace',
      fill: '#ffffff'
    });
    loadingText.setOrigin(0.5, 0.5);

    // Load game assets
    this.load.on('filecomplete', (key) => {
      console.log('Loaded asset:', key);
    });

    // Load the assets with explicit dimensions
    this.load.image('player', characterSprite);
    this.load.image('platform', platformSprite);
    this.load.image('goal', goalSprite);
    this.load.image('obstacleFrog', frogSprite);

    // Update the progress bar
    this.load.on('progress', (value) => {
      progressBar.clear();
      progressBar.fillStyle(0xffffff, 1);
      progressBar.fillRect(width / 4 + 10, height / 2 - 20, (width / 2 - 20) * value, 30);
    });

    this.load.on('complete', () => {
      console.log('PreloadScene: All assets loaded');
      progressBar.destroy();
      progressBox.destroy();
      loadingText.destroy();
    });
  }

  create() {
    console.log('PreloadScene: Starting GameScene');
    this.scene.start('GameScene');
  }
}

================
File: src/index.css
================
#game-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #1a1a1a;
}

canvas {
  border: 2px solid #333;
  border-radius: 8px;
  max-width: 100%;
  max-height: 100vh;
}

================
File: src/main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-12T11:37:16.141Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
App.css
App.jsx
assets/react.svg
components/CharacterSelect.jsx
components/Game.jsx
components/MainMenu.jsx
firebase/firebase.config.js
game/characters.js
game/game.config.js
game/scenes/BootScene.js
game/scenes/GameScene.js
game/scenes/PreloadScene.js
index.css
main.jsx

================================================================
Repository Files
================================================================

================
File: App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: App.jsx
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { ThemeProvider, createTheme } from '@mui/material';
import CssBaseline from '@mui/material/CssBaseline';
import MainMenu from './components/MainMenu';
import CharacterSelect from './components/CharacterSelect';
import Game from './components/Game';

// Create a dark theme
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
  },
});

function App() {
  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <Router>
        <Routes>
          <Route path="/" element={<MainMenu />} />
          <Route path="/character-select" element={<CharacterSelect />} />
          <Route path="/game" element={<Game />} />
        </Routes>
      </Router>
    </ThemeProvider>
  );
}

export default App;

================
File: assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: components/CharacterSelect.jsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Box, 
  Container, 
  Typography, 
  Card, 
  CardContent, 
  CardMedia, 
  Button, 
  Grid 
} from '@mui/material';
import { characters } from '../game/characters';

const CharacterSelect = () => {
  const navigate = useNavigate();

  const handleCharacterSelect = (character) => {
    navigate('/game');
  };

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      <Typography variant="h3" component="h1" align="center" gutterBottom>
        Choose Your Ancestor
      </Typography>
      <Grid container spacing={3}>
        {Object.entries(characters).map(([id, character]) => (
          <Grid item xs={12} sm={6} key={id}>
            <Card>
              <CardMedia
                component="img"
                height="200"
                image="/src/assets/sprites/placeholder-character.png"
                alt={character.name}
                sx={{ objectFit: 'contain', p: 2 }}
              />
              <CardContent>
                <Typography variant="h5" component="h2" gutterBottom>
                  {character.name}
                </Typography>
                <Typography color="text.secondary" gutterBottom>
                  Special Abilities: {character.abilities.join(', ')}
                </Typography>
                <Button 
                  variant="contained" 
                  fullWidth
                  onClick={() => handleCharacterSelect(character)}
                >
                  Select Character
                </Button>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Container>
  );
};

export default CharacterSelect;

================
File: components/Game.jsx
================
import React, { useEffect } from 'react';
import Phaser from 'phaser';
import { gameConfig } from '../game/game.config';
import { BootScene } from '../game/scenes/BootScene';
import { PreloadScene } from '../game/scenes/PreloadScene';
import { GameScene } from '../game/scenes/GameScene';

const Game = () => {
  useEffect(() => {
    const config = {
      ...gameConfig,
      scene: [BootScene, PreloadScene, GameScene]
    };

    const game = new Phaser.Game(config);

    return () => {
      game.destroy(true);
    };
  }, []);

  return <div id="game-container"></div>;
};

export default Game;

================
File: components/MainMenu.jsx
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, Button, Typography, Container } from '@mui/material';

const MainMenu = () => {
  const navigate = useNavigate();
  
  return (
    <Container maxWidth="sm">
      <Box 
        sx={{ 
          minHeight: '100vh',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          gap: 3
        }}
      >
        <Typography variant="h2" component="h1" gutterBottom>
          Saligao Adventures
        </Typography>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, width: '100%' }}>
          <Button 
            variant="contained" 
            size="large"
            onClick={() => navigate('/character-select')}
          >
            Start Game
          </Button>
          <Button 
            variant="outlined" 
            size="large"
            onClick={() => navigate('/leaderboard')}
          >
            Leaderboard
          </Button>
        </Box>
      </Box>
    </Container>
  );
};

export default MainMenu;

================
File: firebase/firebase.config.js
================
import { initializeApp } from "firebase/app";
import { getFirestore } from '@firebase/firestore';
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyCw5QHUZ4bPmzg4UbvjOzhyEqTrmU-IT4Y",
  authDomain: "saligao-ancestors.firebaseapp.com",
  projectId: "saligao-ancestors",
  storageBucket: "saligao-ancestors.firebasestorage.app",
  messagingSenderId: "1081679729656",
  appId: "1:1081679729656:web:2c349f4d703d7aecb67c0d",
  measurementId: "G-VCCKV97XJ0"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
const analytics = getAnalytics(app);

================
File: game/characters.js
================
export const characters = {
    ancestor1: {
      name: 'LJ Cool J',
      sprite: 'ljcoolj',
      abilities: ['doubleJump'],
      stats: {
        speed: 200,
        jumpForce: -400
      }
    }
    // Add more characters as needed
  };

================
File: game/game.config.js
================
// game.config.js
import Phaser from 'phaser';

export const gameConfig = {
  type: Phaser.AUTO,
  parent: 'game-container',
  width: window.innerWidth,
  height: window.innerHeight,
  physics: {
    default: 'arcade',
    arcade: {
      gravity: { y: 600 }, // Increased gravity for faster falling
      debug: false
    }
  },
  scale: {
    mode: Phaser.Scale.RESIZE,
    autoCenter: Phaser.Scale.CENTER_BOTH
  }
};

// Add window resize handler
window.addEventListener('resize', () => {
  if (window.game) {
    window.game.scale.resize(window.innerWidth, window.innerHeight);
  }
});

================
File: game/scenes/BootScene.js
================
import Phaser from 'phaser';

export class BootScene extends Phaser.Scene {
  constructor() {
    super({ key: 'BootScene' });
  }

  preload() {
    // Load initial assets needed for loading screen
    this.load.image('logo', 'path-to-your-logo.png');
  }

  create() {
    this.scene.start('PreloadScene');
  }
}

================
File: game/scenes/GameScene.js
================
import Phaser from 'phaser';

export class GameScene extends Phaser.Scene {
  constructor() {
    super({ key: 'GameScene' });
    this.player = null;
    this.ground = null;
    this.goal = null;
    this.obstacles = null;
    this.gameOver = false;
    this.score = 0;
    this.levelWidth = 3200;
    this.RUNNING_SPEED = 300;
    this.spawnTimer = null;
    this.backgroundTrees = [];
  }

  createGradientBackground() {
    // Create a gradient background
    const width = this.levelWidth;
    const height = window.innerHeight;
    const skyHeight = height * 0.7; // Sky takes up top 70%
    const groundHeight = height * 0.3; // Ground takes up bottom 30%

    const graphics = this.add.graphics();
    
    // Sky gradient (light blue to darker blue)
    graphics.fillGradientStyle(0x87CEEB, 0x87CEEB, 0x4682B4, 0x4682B4, 1);
    graphics.fillRect(0, 0, width, skyHeight);
    
    // Ground gradient (light green to darker green)
    graphics.fillGradientStyle(0x90EE90, 0x90EE90, 0x228B22, 0x228B22, 1);
    graphics.fillRect(0, skyHeight, width, groundHeight);
    
    // Make it scroll with camera but slower
    graphics.setScrollFactor(0.1);
  }

  preload() {
    this.load.image('tree', '/src/assets/backgrounds/tree.png');
  }

  create() {
    this.gameOver = false;
    this.score = 0;
    
    this.physics.world.setBounds(0, 0, this.levelWidth, window.innerHeight);
    
    // Create gradient background
    this.createGradientBackground();

    // Create repeating background trees
    for (let i = 0; i < 20; i++) {
      const tree = this.add.image(
        i * 400,
        window.innerHeight - 300,
        'tree'
      );
      const scale = Phaser.Math.FloatBetween(0.8, 1.2);
      tree.setScale(scale);
      tree.setScrollFactor(0.5);
      this.backgroundTrees.push(tree);
    }

    // Create ground platform
    const groundY = window.innerHeight - 40;
    this.ground = this.physics.add.staticImage(this.levelWidth / 2, groundY, 'platform');
    this.ground.setDisplaySize(this.levelWidth, 20);
    this.ground.setImmovable(true);
    this.ground.refreshBody();
    
    // Create player - ENSURE it starts ON the platform
    const playerStartY = groundY - 60; // Position above ground
    this.player = this.physics.add.sprite(100, playerStartY, 'player');
    this.player.setScale(0.2);
    this.player.setBounce(0);
    this.player.setCollideWorldBounds(true);
    this.player.setGravityY(2000);
    this.player.setFlipX(true);
    
    // Wait a frame to ensure physics are initialized, then snap to ground
    this.time.addEvent({
      delay: 1,
      callback: () => {
        this.player.setY(playerStartY);
        this.player.setVelocityY(0);
      }
    });
    
    // Adjust player hitbox
    this.player.body.setSize(
      this.player.width * 0.3,
      this.player.height * 0.8
    );
    this.player.body.setOffset(
      this.player.width * 0.35,
      this.player.height * 0.2
    );
    
    // Rest of setup...
    this.setupGameObjects();
  }

  setupGameObjects() {
    // Goal setup
    const playerStartY = window.innerHeight - 100;
    this.goal = this.physics.add.sprite(this.levelWidth - 100, playerStartY, 'goal');
    this.goal.setScale(0.3);
    this.goal.setImmovable(true);
    this.goal.body.setAllowGravity(false);
    
    // Obstacles setup
    this.obstacles = this.physics.add.group({
      allowGravity: false,
      immovable: true
    });
    
    // Colliders
    this.physics.add.collider(this.player, this.ground);
    this.physics.add.overlap(this.player, this.goal, this.reachGoal, null, this);
    this.physics.add.overlap(this.player, this.obstacles, this.hitObstacle, null, this);
    
    // Camera
    this.cameras.main.startFollow(this.player, true, 1, 1, -300, 0);
    this.cameras.main.setBounds(0, 0, this.levelWidth, window.innerHeight);
    
    // Input
    this.cursors = this.input.keyboard.createCursorKeys();
    
    // UI
    this.setupUI();
    
    this.startObstacleSpawning();
  }

  setupUI() {
    this.scoreText = this.add.text(16, 16, 'Distance: 0m', {
      fontSize: '18px',
      fill: '#fff',
      backgroundColor: '#000',
      padding: { x: 10, y: 5 }
    }).setScrollFactor(0);

    this.gameOverText = this.add.text(window.innerWidth / 2, window.innerHeight / 2, 'Game Over!\nPress SPACE to restart', {
      fontSize: '32px',
      fill: '#fff',
      backgroundColor: '#000',
      padding: { x: 20, y: 10 },
      align: 'center'
    })
    .setOrigin(0.5)
    .setScrollFactor(0)
    .setVisible(false);

    this.input.keyboard.on('keydown-SPACE', () => {
      if (this.gameOver) {
        this.scene.restart();
      }
    });
  }

  startObstacleSpawning() {
    this.spawnTimer = this.time.addEvent({
      delay: 2000,
      callback: this.spawnObstacle,
      callbackScope: this,
      loop: true
    });
  }

  spawnObstacle() {
    if (this.gameOver) return;

    const cameraX = this.cameras.main.scrollX;
    // Spawn frogs further ahead, off screen
    const spawnX = cameraX + window.innerWidth + Phaser.Math.Between(100, 300);
    
    if (spawnX > this.levelWidth - 200) return;

    // Warning appears before frog enters screen
    const warning = this.add.text(spawnX, window.innerHeight - 150, '!', {
      fontSize: '32px',
      fill: '#ff0000',
      backgroundColor: '#000',
      padding: { x: 10, y: 5 }
    })
    .setOrigin(0.5)
    .setScrollFactor(1);

    this.time.delayedCall(1000, () => {
      if (!this.gameOver) {
        // Spawn frog at random heights
        const baseY = window.innerHeight - 120;
        const randomOffset = Phaser.Math.Between(-50, 50);
        const obstacle = this.obstacles.create(spawnX, baseY + randomOffset, 'obstacleFrog');
        obstacle.setScale(0.08);
        
        // Higher jump animation
        this.tweens.add({
          targets: obstacle,
          y: baseY - 250, // Jump higher
          duration: 800,
          ease: 'Quad.easeOut',
          yoyo: true,
          repeat: -1
        });
        
        warning.destroy();
        
        this.time.delayedCall(4000, () => {
          obstacle.destroy();
        });
      }
    });
  }

  reachGoal(player, goal) {
    if (!this.gameOver) {
      this.gameOver = true;
      this.scoreText.setText('Level Complete!\nDistance: ' + Math.floor(this.score) + 'm');
      player.setTint(0x00ff00);
      this.gameOverText
        .setText('Level Complete!\nPress SPACE to play again')
        .setVisible(true);
      player.setVelocityX(0);
    }
  }

  hitObstacle(player, obstacle) {
    if (!this.gameOver) {
      this.gameOver = true;
      player.setTint(0xff0000);
      player.setVelocityX(0);
      
      this.tweens.add({
        targets: player,
        alpha: 0.5,
        yoyo: true,
        repeat: 2,
        duration: 200
      });
      
      this.gameOverText.setVisible(true);
    }
  }

  update() {
    if (this.gameOver) return;

    this.player.setVelocityX(this.RUNNING_SPEED);
    
    // Higher jump
    const canJump = this.player.body.touching.down || this.player.body.blocked.down;
    
    if (this.cursors.up.isDown && canJump) {
      this.player.setVelocityY(-800); // Much higher jump
      
      this.tweens.add({
        targets: this.player,
        scaleX: 0.22,
        scaleY: 0.18,
        duration: 100,
        yoyo: true
      });
    }
    
    this.score = this.player.x / 50;
    this.scoreText.setText('Distance: ' + Math.floor(this.score) + 'm');

    // Update tree positions for infinite scrolling
    this.backgroundTrees.forEach((tree, index) => {
      const treeX = (index * 400) - (this.cameras.main.scrollX * 0.5) % 8000;
      tree.x = treeX < this.cameras.main.scrollX - 400 ? treeX + 8000 : treeX;
    });
  }
}

================
File: game/scenes/PreloadScene.js
================
import Phaser from 'phaser';

export class PreloadScene extends Phaser.Scene {
  constructor() {
    super({ key: 'PreloadScene' });
  }

  preload() {
    // Debug logging
    console.log('PreloadScene: Starting asset load');
    
    // Create loading bar
    const width = this.cameras.main.width;
    const height = this.cameras.main.height;
    
    const progressBar = this.add.graphics();
    const progressBox = this.add.graphics();
    progressBox.fillStyle(0x222222, 0.8);
    progressBox.fillRect(width / 4, height / 2 - 30, width / 2, 50);

    // Add loading text
    const loadingText = this.add.text(width / 2, height / 2 - 50, 'Loading...', {
      font: '20px monospace',
      fill: '#ffffff'
    });
    loadingText.setOrigin(0.5, 0.5);

    // Load game assets
    this.load.on('filecomplete', (key) => {
      console.log('Loaded asset:', key);
    });

    // Load the assets with explicit dimensions
    this.load.image('player', '/src/assets/sprites/placeholder-character.png');
    this.load.image('platform', '/src/assets/sprites/platform.png');
    this.load.image('goal', '/src/assets/sprites/goal.png');
    this.load.image('obstacleFrog', '/src/assets/sprites/obstacle-frog.png');

    // Update the progress bar
    this.load.on('progress', (value) => {
      progressBar.clear();
      progressBar.fillStyle(0xffffff, 1);
      progressBar.fillRect(width / 4 + 10, height / 2 - 20, (width / 2 - 20) * value, 30);
    });

    this.load.on('complete', () => {
      console.log('PreloadScene: All assets loaded');
      progressBar.destroy();
      progressBox.destroy();
      loadingText.destroy();
    });
  }

  create() {
    console.log('PreloadScene: Starting GameScene');
    this.scene.start('GameScene');
  }
}

================
File: index.css
================
#game-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #1a1a1a;
}

canvas {
  border: 2px solid #333;
  border-radius: 8px;
  max-width: 100%;
  max-height: 100vh;
}

================
File: main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: vite.config.js
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  build: {
    assetsInlineLimit: 0, // This ensures assets are properly handled
    rollupOptions: {
      output: {
        manualChunks: undefined
      }
    }
  },
  base: './' // This helps with relative paths in production
});
